const terminalOutput = document.getElementById('terminal-output');
const terminalInput = document.getElementById('terminal-input');
const cursor = document.getElementById('cursor');
const themeToggle = document.querySelector('.theme-toggle');
let commandHistory = [];
let historyIndex = -1;

const commands = {
    'help': {
        description: 'Displays a list of available commands.',
        output: `
<span class="terminal-success">Available Commands:</span> <br><br>
<span class="cmd">about</span> - Learn more about Daniel (Skilkry).<br>
<span class="cmd">skills</span> - See a list of my technical skills.<br>
<span class="cmd">clear</span> - Clears the terminal output.<br>
<span class="cmd">theme [light|dark]</span> - Toggles between light and dark themes.
`
    },
    'about': {
        description: 'Displays information about me.',
        output: `
<div class="content-section">
<h3 class="section-title">About Me</h3>
<p>Hey there! I'm <span class="terminal-link">Daniel (Skilkry)</span>, a passionate web developer with a knack for crafting engaging and user-friendly digital experiences. I love bringing ideas to life through code, focusing on clean architecture and efficient solutions.</p>
<p>My journey into programming began with a curiosity for how websites work, which quickly evolved into a deep fascination with front-end development and a growing interest in the full stack.</p>
<p>When I'm not on web develpment, you can find me making android apps or reverse engineering some apk ü¶•</p>
</div>
`
    },
    'skills': {
        description: 'Shows my technical skills.',
        output: `
<div class="content-section">
<h3 class="section-title">Skills</h3>
<div class="skill-grid">
<div class="skill-item"><span class="skill-label">Languages:</span> <span class="skill-value">JavaScript (ES6+), HTML5, CSS3, Python, TypeScript</span></div>
<div class="skill-item"><span class="skill-label">Frameworks/Libraries:</span> <span class="skill-value">React, Next.js, Node.js, Express.js, Redux, jQuery, Bootstrap, Tailwind CSS</span></div>
<div class="skill-item"><span class="skill-label">Databases:</span> <span class="skill-value">MongoDB, PostgreSQL, MySQL, Firebase</span></div>
<div class="skill-item"><span class="skill-label">Tools/Platforms:</span> <span class="skill-value">Git, npm, Webpack, Docker, Heroku, Vercel, Netlify</span></div>
<div class="skill-item"><span class="skill-label">Concepts:</span> <span class="skill-value">Responsive Design, RESTful APIs, OOP, Functional Programming, Agile</span></div>
</div>
</div>
`  
    },
    'clear': {
        description: 'Clears the terminal.',
        action: () => {
            terminalOutput.innerHTML = '';
            addWelcomeMessage();
        }
    },
    'theme': {
        description: 'Toggles between light and dark themes. Usage: theme [light|dark]',
        action: (args) => {
            if (args.length === 1) {
                const theme = args[0].toLowerCase();
                if (theme === 'light') {
                    document.documentElement.classList.add('theme-light');
                    localStorage.setItem('theme', 'light');
                    writeOutput('Theme set to light.', 'success');
                } else if (theme === 'dark') {
                    document.documentElement.classList.remove('theme-light');
                    localStorage.setItem('theme', 'dark');
                    writeOutput('Theme set to dark.', 'success');
                } else {
                    writeOutput(`Usage: <span class="cmd-error">theme [light|dark]</span>`, 'error');
                }
            } else if (args.length === 0) {
                // Toggle logic if no argument is provided
                if (document.documentElement.classList.contains('theme-light')) {
                    document.documentElement.classList.remove('theme-light');
                    localStorage.setItem('theme', 'dark');
                    writeOutput('Theme toggled to dark.', 'success');
                } else {
                    document.documentElement.classList.add('theme-light');
                    localStorage.setItem('theme', 'light');
                    writeOutput('Theme toggled to light.', 'success');
                }
            } else {
                writeOutput(`Usage: <span class="cmd-error">theme [light|dark]</span>`, 'error');
            }
        }
    }
};

function writeOutput(text, type = 'output') {
    const outputLine = document.createElement('div');
    outputLine.classList.add('terminal-response');
    if (type === 'error') outputLine.classList.add('terminal-error');
    if (type === 'success') outputLine.classList.add('terminal-success');
    if (type === 'warning') outputLine.classList.add('terminal-warning');

    outputLine.innerHTML = text;
    terminalOutput.appendChild(outputLine);
    terminalOutput.scrollTop = terminalOutput.scrollHeight;
}

function writeCommand(command) {
    const commandLine = document.createElement('div');
    commandLine.classList.add('terminal-line');
    commandLine.innerHTML = `<span class="prompt"><span class="prompt-user">skilkry</span>@<span class="prompt-user">portfolio</span></span><span class="prompt-symbol">:$ ~</span> <span class="cmd-executed">${command}</span>`;
    terminalOutput.appendChild(commandLine);
    terminalOutput.scrollTop = terminalOutput.scrollTop; // Maintain scroll position for a moment
    terminalOutput.scrollTop = terminalOutput.scrollHeight; // Then scroll to bottom
}

async function processCommand(command) {
    writeCommand(command);
    const [cmd, ...args] = command.trim().split(' ');

    if (commands[cmd]) {
        if (commands[cmd].action) {
            commands[cmd].action(args);
        } else if (commands[cmd].output) {
            writeOutput(commands[cmd].output);
        }
    } else {
        writeOutput(`Command not found: <span class="cmd-error">${command}</span>. Type <span class="cmd">help</span> for a list of commands.`, 'error');
    }
}

terminalInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        const command = terminalInput.value.trim();
        if (command === '') return;

        commandHistory.unshift(command);
        historyIndex = -1; // Reset history index
        terminalInput.value = '';
        processCommand(command);
    } else if (e.key === 'ArrowUp') {
        e.preventDefault(); // Prevent cursor from moving to the beginning of the input
        if (commandHistory.length > 0 && historyIndex < commandHistory.length - 1) {
            historyIndex++;
            terminalInput.value = commandHistory[historyIndex];
        }
    } else if (e.key === 'ArrowDown') {
        e.preventDefault(); // Prevent cursor from moving to the end of the input
        if (historyIndex > 0) {
            historyIndex--;
            terminalInput.value = commandHistory[historyIndex];
        } else {
            historyIndex = -1;
            terminalInput.value = '';
        }
    }
});

// Cursor animation
terminalInput.addEventListener('focus', () => cursor.classList.remove('stopped'));
terminalInput.addEventListener('blur', () => cursor.classList.add('stopped'));

// Theme toggle button functionality
themeToggle.addEventListener('click', () => {
    const currentTheme = document.documentElement.classList.contains('theme-light') ? 'light' : 'dark';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    commands['theme'].action([newTheme]);
    themeToggle.innerHTML = newTheme === 'dark' ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
});

// Load theme from localStorage
function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
        document.documentElement.classList.add('theme-light');
        themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
    } else {
        document.documentElement.classList.remove('theme-light');
        themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    }
}

function addWelcomeMessage() {
    writeOutput(`
<pre class="welcome-banner">
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£§‚£§‚£§‚£§‚£Ñ‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†∂‚£ª‚†ù‚†ã‚††‚†î‚†õ‚†Å‚°Ä‚†Ä‚†à‚¢â‚°ô‚†ì‚†∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚¢ã‚£¥‚°Æ‚†ì‚†ã‚†Ä‚†Ä‚¢Ñ‚†Ä‚†Ä‚†â‚†¢‚£Ñ‚†Ä‚†à‚†Å‚†Ä‚°Ä‚†ô‚¢∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚¢Å‚£î‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°Ü‚†Ä‚†Ä‚†Ä‚†à‚¢¶‚°Ä‚†Ä‚†Ä‚†ò‚¢Ø‚¢¢‚†ô‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚†É‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚£¶‚°Ä‚†Ä‚†Ä‚¢Ø‚†Ä‚†à‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†Ü‚°Ñ‚¢†‚¢ß‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°à‚¢∂‚°¶‚£ø‚£∑‚£ø‚¢â‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£Ø‚£ø‚£Å‚°ü‚†à‚†£‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ‚†ò‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚¢æ‚£ø‚£æ‚¢æ‚†ô‚†ª‚£æ‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°ø‚£Æ‚†á‚¢ô‚†∑‚¢Ñ‚£∏‚°ó‚°Ü‚†Ä‚¢ò‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†ß‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚°Ä‚°∏‚£ø‚£ø‚†ò‚°é‚¢Ü‚†à‚¢≥‚£Ω‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ü‚¢ª‚¢∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£≥‚°ø‚°∏‚¢Ä‚£ø‚†Ä‚†Ä‚¢∏‚†ô‚†Å‚†Ä‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚††‚°º‚°§‚†¥‚¢ã‚£Ω‚£±‚¢ø‚£ß‚†Ä‚¢≥‚†à‚¢ß‚†Ä‚¢ª‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ø‚£†‚°£‚†É‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£≥‚£ø‚†á‚£á‚¢∏‚£ø‚¢∏‚£†‚†º‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°Ä‚†â‚†í‚£æ‚¢æ‚£Ü‚¢ü‚£≥‚°∂‚†ì‚†∂‚†ø‚¢º‚£ø‚£á‚†à‚°á‚†ò‚¢Ü‚†à‚¢ø‚°ò‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∑‚£ç‚£§‚°∂‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†É‚£ø‚†Ä‚°è‚¢∏‚£ø‚£ø‚†Ä‚¢∏‚†Ä‚†Ä‚¢†‚°ó‚¢Ä‚†á‚†Ä‚¢†‚°ü‚†Ä‚†ª‚£æ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚£ø‚£ø‚°Ä‚¢π‚°Ä‚†à‚¢¶‚†à‚¢∑‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Å‚£§‚£Ñ‚†Å‚†Ä‚†Ä‚†Ä‚£º‚°è‚¢∞‚£ü‚†Ä‚£á‚†ò‚£ø‚£ø‚£æ‚£æ‚£Ü‚¢Ä‚£æ‚†É‚£º‚¢†‚£∂‚£ø‚£≠‚£∑‚£∂‚£æ‚£ø‚£§‚†Ä‚†Ä‚†Ä‚°á‚°Ø‚£ç‚£ß‚†Ä‚£∑‚†Ñ‚†à‚¢≥‚°Ä‚¢ª‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚¢Ä‚£æ‚£ß‚†Ä‚°ó‚°Ñ‚¢ø‚£ø‚°ô‚£Ω‚£ø‚£ü‚†õ‚†ö‚†õ‚†ô‚†â‚¢π‚£ø‚£ø‚£¶‚†Ä‚¢∏‚°ø‚†Ä‚†Ä‚†Ä‚¢∞‚°Ø‚£å‚¢ª‚°Ä‚¢∏‚¢†‚¢∞‚°Ñ‚†π‚°∑‚£ø‚£¶‚£§‚†§‚£∂‚°á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚£á‚£æ‚£ø‚¢∏‚¢†‚£ß‚¢ß‚†ò‚£ø‚°á‚†∏‚£ø‚¢ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ø‚†á‚£ø‚†Ç‚£∏‚¢∞‚†Ä‚†Ä‚¢Ä‚£∏‚°ß‚£ä‚£º‚°á‚¢∏‚£º‚£∏‚£∑‚¢£‚¢ª‚£Ñ‚†â‚†ô‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£≥‚£§‚£¥‚£ø‚£è‚£ø‚£æ‚¢∏‚£ø‚°ò‚£ß‚£ò‚¢ø‚£Ä‚°ô‚£û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¨‚¢Ä‚£â‚¢†‚£ß‚°è‚†Ä‚†Ä‚°é‚£ø‚£ø‚£ø‚£ø‚†É‚£∏‚°è‚£ø‚£ø‚°é‚¢ø‚°ò‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚£†‚£º‚£ø‚£ø‚£ø‚£º‚£ø‚£ß‚¢ø‚£ø‚£ø‚£Ø‚°ª‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚¢Ø‚†£‚°Ω‚¢ü‚£Ω‚†Ä‚†Ä‚¢ò‚°á‚£ø‚£ø‚£ø‚°ü‚£¥‚£ø‚£∑‚£ø‚£ø‚£ß‚£ø‚£∑‚°Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£º‚£π‚£ø‚£á‚£∏‚£ø‚£ø‚£ø‚£ª‚£ö‚£ø‚°ø‚£ø‚£ø‚£¶‚£§‚£Ä‚°â‚†É‚†Ä‚¢Ä‚£Ä‚£§‚°∂‚†õ‚°è‚†Ä‚¢Ä‚£º‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ã‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†í‚†í‚†í‚¢≠‚¢ª‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚†ø‚£ø‚°è‚†Ä‚°º‚†Å‚£Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ü‚°ª‚£ø‚£ø‚°ø‚†£‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†∏‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚¢ø‚£Ø‚°Ω‚†ø‚†õ‚†ã‚£µ‚¢ü‚£ã‚£ø‚£∂‚£û‚£§‚£æ‚£ø‚£ø‚°ü‚¢â‚°ø‚¢ã‚†ª‚¢Ø‚°â‚¢ª‚°ü‚¢ø‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°û‚£ø‚£Ü‚°Ä‚†Ä‚°º‚°è‚†â‚†ö‚†≠‚¢â‚£†‚†¨‚†õ‚†õ‚¢Å‚°¥‚£´‚†ñ‚†Å‚†Ä‚†Ä‚£©‚†ü‚†Å‚£∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†à‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£Ω‚£ø‚£ø‚£æ‚†≥‚°ô‚£¶‚°§‚†ú‚†ä‚†Å‚†Ä‚£Ä‚°¥‚†Ø‚†æ‚†ó‚†í‚†í‚†õ‚†õ‚†õ‚†õ‚†õ‚†ì‚†ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚£ª‚£ø‚£ø‚†î‚¢™‚†ì‚†¨‚¢ç‚†â‚£©‚£Ω‚¢ª‚£§‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†π‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£æ‚°è‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ø‚£ø‚£ø‚†Ä‚†Ä‚£á‚†Ä‚£†‚†é‚†Å‚¢π‚°é‚°ü‚°è‚£∑‚£∂‚†ø‚†õ‚°ü‚†õ‚†õ‚£´‚†ü‚†â‚¢ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£∑‚†à‚¢∑‚°§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£æ‚£∑‚°Ä‚£Ä‚£Ä‚£∑‚°Ö‚†Ä‚†Ä‚†à‚£∑‚¢≥‚°á‚£ø‚†Ä‚†Ä‚£∏‚†Å‚¢†‚°æ‚£ü‚£õ‚£ª‚£ü‚°ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ø‚¢ª‚£è‚°µ‚†ø‚†ø‚¢§‚£Ñ‚†Ä‚¢Ä‚£ø‚¢∏‚£π‚£ø‚£Ä‚£¥‚£ø‚£¥‚£ø‚£õ‚†ã‚†â‚†â‚°â‚†õ‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°é‚£ø‚£•‚£∂‚†ñ‚¢â‚£ø‚°ø‚£ø‚£ø‚°ø‚£ø‚£ü‚†ø‚†ø‚£ø‚£ø‚£ø‚°Ø‚†ª‚£ø‚£ø‚£ø‚£∑‚°Ω‚£ø‚°ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°ò‚£ø‚£©‚†∂‚£õ‚£ã‚°Ω‚†ø‚£∑‚¢¨‚£ô‚£ª‚£ø‚£ø‚£ø‚£Ø‚£õ‚†≥‚£§‚£¨‚°ª‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚£ø‚£õ‚£ª‚£ø‚°ø‚†ø‚†ü‚†ó‚†∂‚†∂‚†∂‚†∂‚†§‚†§‚¢§‚†§‚°§‚¢§‚£§‚£§‚£§‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚££‚¢π‚£∑‚£∂‚£ø‚£ø‚£¶‚£¥‚£ü‚£õ‚£Ø‚£§‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚£§‚£§‚£§‚£§‚£§‚£Ñ
‚†Ä‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†õ‚†ª‚†ø‚†ø‚†ø‚†∑‚†∂‚†∂‚¢∂‚£∂‚£∂‚£∂‚£∂‚£§‚£§‚£§‚£§‚£§‚£•‚£¨‚£≠‚£≠‚£â‚£©‚£ç‚£ô‚£è‚£â‚£è‚£Ω‚£∂‚£∂‚£∂‚£§‚£§‚£¨‚£§‚£§‚£æ‚£ø‚†∂‚†æ‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†É
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†â‚†â‚†â‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
</pre>
<p class="welcome-text">Welcome to <span class="accent-cyan">my portfolio</span>!</p>
<p class="welcome-text">This is an interactive terminal where you can learn more about me. </p>
<p class="welcome-tip">Type <span class="cmd">help</span> and press <span class="cmd">Enter</span> to see available commands.</p>
<p class="welcome-ready">Ready to explore?</p>
    `);
}

document.addEventListener('DOMContentLoaded', () => {
    loadTheme();
    addWelcomeMessage();
    terminalInput.focus();
});